#KNN, Decision Tree, XGB, SVM, Logestic Regression, Random Forest
import time
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_score, recall_score, mean_squared_error
import xgboost as xgb
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline

# Load the data
# Assuming your data is in a DataFrame 'df' with features and labels zero and one
# Imagine X = df.drop('label', axis=1), y = df['label']
# Make sure your labels are '0' and '1'

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest
start_time = time.time()
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_time = time.time() - start_time

rf_predictions = rf_model.predict(X_test)
rf_conf_matrix = confusion_matrix(y_test, rf_predictions)
rf_accuracy = accuracy_score(y_test, rf_predictions)
rf_f1 = f1_score(y_test, rf_predictions)
rf_precision = precision_score(y_test, rf_predictions)
rf_recall = recall_score(y_test, rf_predictions)
rf_mse = mean_squared_error(y_test, rf_predictions)

# XGBoost
start_time = time.time()
xgb_model = xgb.XGBClassifier(random_state=42)
xgb_model.fit(X_train, y_train)
xgb_time = time.time() - start_time

xgb_predictions = xgb_model.predict(X_test)
xgb_conf_matrix = confusion_matrix(y_test, xgb_predictions)
xgb_accuracy = accuracy_score(y_test, xgb_predictions)
xgb_f1 = f1_score(y_test, xgb_predictions)
xgb_precision = precision_score(y_test, xgb_predictions)
xgb_recall = recall_score(y_test, xgb_predictions)
xgb_mse = mean_squared_error(y_test, xgb_predictions)

# K-Nearest Neighbors
start_time = time.time()
knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)
knn_time = time.time() - start_time

knn_predictions = knn_model.predict(X_test)
knn_conf_matrix = confusion_matrix(y_test, knn_predictions)
knn_accuracy = accuracy_score(y_test, knn_predictions)
knn_f1 = f1_score(y_test, knn_predictions)
knn_precision = precision_score(y_test, knn_predictions)
knn_recall = recall_score(y_test, knn_predictions)
knn_mse = mean_squared_error(y_test, knn_predictions)

# Support Vector Machine
start_time = time.time()
svm_model = make_pipeline(StandardScaler(), SVC(probability=True))
svm_model.fit(X_train, y_train)
svm_time = time.time() - start_time

svm_predictions = svm_model.predict(X_test)
svm_conf_matrix = confusion_matrix(y_test, svm_predictions)
svm_accuracy = accuracy_score(y_test, svm_predictions)
svm_f1 = f1_score(y_test, svm_predictions)
svm_precision = precision_score(y_test, svm_predictions)
svm_recall = recall_score(y_test, svm_predictions)
svm_mse = mean_squared_error(y_test, svm_predictions)

# Decision Trees
start_time = time.time()
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_time = time.time() - start_time

dt_predictions = dt_model.predict(X_test)
dt_conf_matrix = confusion_matrix(y_test, dt_predictions)
dt_accuracy = accuracy_score(y_test, dt_predictions)
dt_f1 = f1_score(y_test, dt_predictions)
dt_precision = precision_score(y_test, dt_predictions)
dt_recall = recall_score(y_test, dt_predictions)
dt_mse = mean_squared_error(y_test, dt_predictions)

# Logistic Regression
start_time = time.time()
lr_model = LogisticRegression(random_state=42)
lr_model.fit(X_train, y_train)
lr_time = time.time() - start_time

lr_predictions = lr_model.predict(X_test)
lr_conf_matrix = confusion_matrix(y_test, lr_predictions)
lr_accuracy = accuracy_score(y_test, lr_predictions)
lr_f1 = f1_score(y_test, lr_predictions)
lr_precision = precision_score(y_test, lr_predictions)
lr_recall = recall_score(y_test, lr_predictions)
lr_mse = mean_squared_error(y_test, lr_predictions)

# Print results
print("Random Forest:")
print("Time:", rf_time)
print("Confusion Matrix:\n", rf_conf_matrix)
print("Accuracy:", rf_accuracy)
print("F1 Score:", rf_f1)
print("Precision:", rf_precision)
print("Recall:", rf_recall)
print("Mean Squared Error:", rf_mse)

print("\nXGBoost:")
print("Time:", xgb_time)
print("Confusion Matrix:\n", xgb_conf_matrix)
print("Accuracy:", xgb_accuracy)
print("F1 Score:", xgb_f1)
print("Precision:", xgb_precision)
print("Recall:", xgb_recall)
print("Mean Squared Error:", xgb_mse)

print("\nK-Nearest Neighbors:")
print("Time:", knn_time)
print("Confusion Matrix:\n", knn_conf_matrix)
print("Accuracy:", knn_accuracy)
print("F1 Score:", knn_f1)
print("Precision:", knn_precision)
print("Recall:", knn_recall)
print("Mean Squared Error:", knn_mse)

print("\nSupport Vector Machine:")
print("Time:", svm_time)
print("Confusion Matrix:\n", svm_conf_matrix)
print("Accuracy:", svm_accuracy)
print("F1 Score:", svm_f1)
print("Precision:", svm_precision)
print("Recall:", svm_recall)
print("Mean Squared Error:", svm_mse)

print("\nDecision Trees:")
print("Time:", dt_time)
print("Confusion Matrix:\n", dt_conf_matrix)
print("Accuracy:", dt_accuracy)
print("F1 Score:", dt_f1)
print("Precision:", dt_precision)
print("Recall:", dt_recall)
print("Mean Squared Error:", dt_mse)

print("\nLogistic Regression:")
print("Time:", lr_time)
print("Confusion Matrix:\n", lr_conf_matrix)
print("Accuracy:", lr_accuracy)
print("F1 Score:", lr_f1)
print("Precision:", lr_precision)
print("Recall:", lr_recall)
print("Mean Squared Error:", lr_mse)
