# Using boxplots for comparison of the performance and mean square error

import matplotlib.pyplot as plt

# Data for boxplots
precision_data = [rf_precision, xgb_precision, knn_precision, svm_precision, dt_precision, lr_precision, siamese_precision, cnn_precision]
accuracy_data = [rf_accuracy, xgb_accuracy, knn_accuracy, svm_accuracy, dt_accuracy, lr_accuracy, siamese_accuracy, cnn_accuracy]
specificity_data = [rf_specificity, xgb_specificity, knn_specificity, svm_specificity, dt_specificity, lr_specificity, siamese_specificity, cnn_specificity]
sensitivity_data = [rf_recall, xgb_recall, knn_recall, svm_recall, dt_recall, lr_recall, siamese_recall, cnn_recall]
f1_data = [rf_f1, xgb_f1, knn_f1, svm_f1, dt_f1, lr_f1, siamese_f1, cnn_f1]
time_data = [rf_time, xgb_time, knn_time, svm_time, dt_time, lr_time, siamese_time, cnn_time]
mse_data = [rf_mse, xgb_mse, knn_mse, svm_mse, dt_mse, lr_mse, siamese_mse, cnn_mse]

# Algorithm labels
algorithms = ['Random Forest', 'XGBoost', 'KNN', 'SVM', 'Decision Trees', 'Logistic Regression', 'Siamese Networks', 'CNN']

# Create subplots for each algorithm
fig, axes = plt.subplots(2, 4, figsize=(18, 10))
fig.suptitle('Comparison of Metrics Across Algorithms', fontsize=16)

# Define a consistent color scheme
boxplot_colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightsalmon', 'lightpink', 'lightgray', 'lightyellow', 'lightcyan']

# Metrics data
metrics_data = [precision_data, accuracy_data, specificity_data, sensitivity_data, f1_data, time_data, mse_data]
metric_labels = ['Precision', 'Accuracy', 'Specificity', 'Sensitivity (Recall)', 'F1-Score', 'Time (seconds)', 'Mean Squared Error']

# Loop through algorithms and create subplots
for i, (algorithm, color) in enumerate(zip(algorithms, boxplot_colors)):
    # Extract data for the current algorithm
    algorithm_data = [metric[i] for metric in metrics_data]

    # Plot boxplot for the current algorithm
    row, col = divmod(i, 4)
    axes[row, col].boxplot(algorithm_data, labels=metric_labels, vert=False, patch_artist=True, boxprops=dict(facecolor=color))
    axes[row, col].set_title(algorithm)
    axes[row, col].grid(True)

# Adjust subplot layout
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

